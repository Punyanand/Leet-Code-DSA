class Solution:
    # Function to sort a list using the QuickSort algorithm.
    def quickSort(self, arr, low, high):
        if low < high:
            # pi is the partitioning index, arr[pi] is now at the right place
            pi = self.partition(arr, low, high)

            # Recursively sort elements before and after partition
            self.quickSort(arr, low, pi - 1)
            self.quickSort(arr, pi + 1, high)

    # Function to partition the array and return the partition index
    def partition(self, arr, low, high):
        pivot = arr[high]
        i = low - 1  # Index of the smaller element

        # Traverse through the array
        for j in range(low, high):
            if arr[j] <= pivot:  # If the current element is smaller than or equal to the pivot
                i += 1
                # Swap the smaller element with the element at index i
                arr[i], arr[j] = arr[j], arr[i]

        # Place the pivot in the correct position
        arr[i + 1], arr[high] = arr[high], arr[i + 1]
        return i + 1  # Return the partitioning index

# Driver code
if __name__ == "__main__":
    t = int(input())  # Number of test cases
    for _ in range(t):
        n = int(input())  # Number of elements in the array
        arr = list(map(int, input().split()))  # Input array
        Solution().quickSort(arr, 0, n - 1)  # Sort the array using QuickSort
        for i in range(n):
            print(arr[i], end=" ")  # Print sorted array
        print()
