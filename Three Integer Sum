class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        result = []
        
        # Iterate over each number in the array
        for i in range(len(nums) - 2):
            # Skip duplicate elements to avoid duplicate triplets
            if i > 0 and nums[i] == nums[i - 1]:
                continue

            # Initialize two pointers
            left, right = i + 1, len(nums) - 1

            # Use two-pointer technique to find valid triplets
            while left < right:
                current_sum = nums[i] + nums[left] + nums[right]

                if current_sum == 0:
                    # Found a valid triplet
                    result.append([nums[i], nums[left], nums[right]])

                    # Move pointers and skip duplicates
                    left += 1
                    right -= 1

                    # Skip duplicates for left and right pointers
                    while left < right and nums[left] == nums[left - 1]:
                        left += 1
                    while left < right and nums[right] == nums[right + 1]:
                        right -= 1

                elif current_sum < 0:
                    # Move left pointer to increase the sum
                    left += 1
                else:
                    # Move right pointer to decrease the sum
                    right -= 1

        return result
